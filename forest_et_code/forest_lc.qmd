---
title: "forest_lc"
output: html_document
editor_options: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Load libraries

```{r}
#| warning: false

# You might need to install some of these

# data manipulation
library(tidyverse) 
library(lubridate)
library(ggpmisc)
library(terra)
library(units)

#plotting
library(ggplot2)
library(RColorBrewer)
library(patchwork)

#mapping / working with geospatial data
library(sf)
library(tmap)
library(mapview)
library(raster)
library(exactextractr)
library(FedData)

#install rasterVis
#install.packages("rasterVis")
#install.packages("lattice")
library(lattice)
library(rasterVis)

tmap_mode("plot")

theme_set(theme_classic())
```

# Accessing forest land cover data

-   The files that you will be working with are too large to host on
    GitHub :(
-   We will access them via local connection. Just make sure you don't
    have them within the project folder when you push and it should be
    fine.

```{r}
# Navigate to data 
# Change to where you will store it on your computer

# Will file path
# Uncomment this when you are ready to run yours. 
#parcel_shp <- st_read("C:/ET Data/forest_et_data")

# Lindsey file path
# comment this out when you are ready to run yours.
parcel_shp <- st_read("C:/Users/lfink/Desktop/forest_et_data/")

# Renaming the column names as they're reading in weird:
parcel_shp <- parcel_shp |> 
  rename("LOCALITY" = LOCALIT,
         "DIVISION" = DIVISIO,
         "PROVINCE" = PROVINC,
         "ID" = VGIN_QP, 
         "mixed_area" = mixed_r,
         "totalf_area" =totlf_r,
         "totalf" = ttl_frs)

parcel_shp <- parcel_shp |> dplyr::distinct(ID, .keep_all = TRUE)

parcel_df <- as.data.frame(parcel_shp)

head(parcel_df)
```

This data consists of 17,140 landowner parcels where at least 90% of
their land is identified as forest landcover using the NLCD 2019 data. I
have summarized this data by three forest land cover types: deciduous,
evergreen and mixed. They also include landowner information such as the
county and the physiographic region.

# Mapping in R

There are two main packages I like to use for mapping and geospatial
data visualization. One is called "mapview" and is an interactive map
frame for viewing data. The other is called "tmap" and it is how you can
create static maps.

Good tutorials:
https://bookdown.org/nicohahn/making_maps_with_r5/docs/mapview.html
https://bookdown.org/nicohahn/making_maps_with_r5/docs/tmap.html

```{r}
# Load in physiographic province shapefiles:
#region <- st_read("C:/ET Data/forest_et_data/va_physio_province.shp")

# Lindsey file path:
region <- st_read("C:/Users/lfink/Desktop/forest_et_data/va_physio_province.shp")

mapview(region, zcol = "PROVINCE") 
```

Example in Tmap:

```{r}
tm_shape(region) +
  tm_polygons("PROVINCE") +
  tm_layout(legend.position = c("left", "TOP"))
```

# Data manipulation

```{r}
# Shapefiles work similarly to dataframes. Most operations you can apply to them.

# filter function:
CP_parcels <- filter(parcel_df, PROVINCE == "COASTAL PLAIN")

# summarize function:
summarise(CP_parcels, mean_area = mean(totalf_area))
```

# Simple plotting using ggplot and using pipes:

```{r}
parcel_df |> 
  ggplot(aes(x = PROVINCE, y = mean(Acres), fill = PROVINCE)) +
  geom_bar(stat = "identity") +
  theme_bw()
  
```

TASK 1: - Use the mutate() function to create a new column called sq_km
to convert the area from acres to square kilometers.

```{r}
library(dplyr)
parcel_df <- parcel_df %>%
  mutate(sq_km = Acres * 0.00404686)
```

TASK 2: - Use the pivot_longer() function to create 2 new tables: -
percentage_long: use the decid, evergreen, mixed columns, make the names
of columns "forest_type" and values "forest_percentage". - area_long:
use the decid_area, eg_area, mixed_area columns, make the names of the
columns "forest_type" and value "f_area" (in sqkm)

https://tidyr.tidyverse.org/reference/pivot_longer.html

```{r}
percentage_long <- parcel_df %>%
  pivot_longer(cols = c(decid, evergrn, mixed), 
               names_to = "forest_type", 
               values_to = "forest_percentage")

area_long <- parcel_df %>%
  pivot_longer(cols = c(decid_r, eg_area, mixed_area), 
               names_to = "forest_type", 
               values_to = "f_area")
```

TASK 3: - Create a box plot using forest percentages columns (decid,
evergreen, mixed) to show total forest for each region (PROVINCE column)

```{r}
forest_long <- parcel_df %>%
  pivot_longer(cols = c(decid, evergrn, mixed), 
               names_to = "forest_type", 
               values_to = "forest_percentage")
# Define custom colors for the plot
colors_plots <- c("#192819", "#2c4928", "#2e6409", "#719b25", "#cbe368")

# Create the box plot
plot <- ggplot(forest_long, aes(x = forest_type, y = forest_percentage, fill = PROVINCE)) +
  geom_boxplot() +
  labs(title = "Forest Percentages by Forest Type per Region",
       x = "Forest Type",
       y = "Forest Percentage",
       fill = "Region") +
  theme_minimal() +
  scale_fill_manual(values = colors_plots) +
  facet_wrap("PROVINCE")
print(plot)




colors_plots <- c("#192819", "#2c4928", "#2e6409", "#719b25", "#cbe368")

# Create the stacked bar plot
# ggplot(parcel_long, aes(x = fortype_area, y = f_area, fill = PROVINCE)) +
#   geom_bar(stat = "identity") +
#   labs(title = "Total Forest Area by Forest Type per Region",
#        y = "Total Forest Area",
#        fill = "Region") +
#   theme_minimal() +
#   scale_fill_manual(values = colors_plots)

# ggplot(parcel_long, aes(x = f_percentage, y = fortype, fill = PROVINCE)) +
#   geom_bar(stat = "identity") +
#   labs(title = "Total Forest Area by Forest Type per Region",
#        y = "Total Forest Area",
#        fill = "Region") +
#   theme_minimal() +
#   scale_fill_manual(values = colors_plots)
```

TASK 4: Pulling in NLCD data and cropping to state boundary

-   I recommend you put the NLCD data in your "forest_et" folder. It
    will make your life easier.

-   I have given you code to crop and clean the 2019 land cover code. It
    should work as long as you change the file names to where your data
    is. Following the workflow for the 2019 LC, create two more cropped
    land cover objects called LC_16c and LC_13c

```{r}
# Dissolve region shapefile to make state boundary:
VA <- st_union(region, by_feature = FALSE)

mapview(VA)

# Load in LC using rast function
# Change this to where your LC data is
# Repeat these step for years 2016 and 2013:

#LC_19 <- rast("C:/ET Data/forest_et_data/landcover/NLCD_2019_Land_Cover_L48.tiff")

LC_19 <- rast("C:/Users/lfink/Desktop/forest_et_data/NLCD/NLCD_nYlVEgAiysZs27Lh21Mw/NLCD_2019_Land_Cover_L48_20210604_nYlVEgAiysZs27Lh21Mw.tiff")

# Check coordinate referrence system (CRS) of both datasets
crs_VA <- st_crs(VA)
crs_LC_19 <- crs(LC_19)

# If CRS do not match, transform the vector data to the CRS of the raster data
if (crs_VA != crs_LC_19) {
  VA <- st_transform(VA, crs_LC_19)
}

# Crop the landcover by the VA shapefile
LC_19c <- crop(LC_19, VA, ext=FALSE)

# You can check by plotting both:
plot(LC_19c)
plot(VA, add = TRUE, border = "black", lwd = 3)

# Follow steps to do the same for 2016 and 2013 land cover:
# Load NLCD 2016 raster
#LC_16 <- rast("C:/ET Data/forest_et_data/landcover/NLCD_2016_Land_Cover_L48.tiff")
#

LC_16 <- rast("C:/Users/lfink/Desktop/forest_et_data/NLCD/NLCD_nYlVEgAiysZs27Lh21Mw/NLCD_2016_Land_Cover_L48_20210604_nYlVEgAiysZs27Lh21Mw.tiff")

# Check CRS
crs_LC_16 <- crs(LC_16)

# Transform if necessary
if (crs_VA != crs_LC_16) {
  VA <- st_transform(VA, crs_LC_16)
}

# Crop the NLCD 2016 data by the VA shapefile
LC_16c <- crop(LC_16, VA)

# Plot to check
plot(LC_16c)
plot(VA, add = TRUE, border = "black", lwd = 3)

# Load NLCD 2013 raster
#LC_13 <- rast("C:/ET Data/forest_et_data/landcover/NLCD_2013_Land_Cover_L48.tiff")

LC_13 <- rast("C:/Users/lfink/Desktop/forest_et_data/NLCD/NLCD_nYlVEgAiysZs27Lh21Mw/NLCD_2013_Land_Cover_L48_20210604_nYlVEgAiysZs27Lh21Mw.tiff")

# Check CRS
crs_LC_13 <- crs(LC_13)

# Transform if necessary
if (crs_VA != crs_LC_13) {
  VA <- st_transform(VA, crs_LC_13)
}

# Crop the NLCD 2013 data by the VA shapefile
LC_13c <- crop(LC_13, VA)

# Plot to check
```


```{r}
plot(LC_13c)
plot(VA, add = TRUE, border = "black", lwd = 3)


```

# Land Cover Classes

Land cover is different from the ET rasters we have been downloading and
working with. The LC data is called a categorical raster, where each
value has an associated land cover class.

-   For right now, we want to use the three forest cover types:
-   41: Deciduous Forest
-   42: Evergreen Forest
-   43: Mixed Forest

```{r}
legend <- pal_nlcd()
legend
```

TASK 5: Zonal statistics of parcel shapefiles

We will use the "exactextractr" package to create zonal statistics for
multiple land cover classes for our three years of land cover. In this
case, our zonal statistics will be an area-weighted mean of the pixels
per parcel.

-   I have already provided you with the areas and percentages of three
    the forest classes, I would like you to calculate the forest land
    cover classes for 2016 and 2019.
-   I recommend chunking this code by year, I will provide a template
    for you below.
-   I also think you should do all of the parcel extractions within the
    same code section.

```{r}
# Example of percentages with one land cover class:
#evergreen
evergreen_pct19 <- exactextractr::exact_extract(
  LC_19, parcel_shp, function(value, fraction) { 
    100 * sum(fraction[value == 42]) / sum(fraction) # notice the "value == ##" you will need to change this for other land cover classes
  }
)



#deciduous
deciduous_pct19 <- exactextractr::exact_extract(
  LC_19, parcel_shp, function(value, fraction) { 
    100 * sum(fraction[value == 41]) / sum(fraction) # notice the "value == ##" you will need to change this for other land cover classes
  }
)


#mixed
mixed_pct19 <- exactextractr::exact_extract(
  LC_19, parcel_shp, function(value, fraction) { 
    100 * sum(fraction[value == 43]) / sum(fraction) # notice the "value == ##" you will need to change this for other land cover classes
  }
)


# You will need to use the "cbind", or column bind, function to match the output to your original data table.
# I am going to write you some code for how you should go about this:
#parcel_lc19 <- parcel_df |> 
  #dplyr::select(ID, sq_km, LOCALITY, DIVISION, PROVINCE)

# If you want to get fancy, you can do it all in a pipe function:
#parcel_lc19 <- parcel_lc19 |> 
  #cbind(evergreen_pct) |> 
  #mutate(eg_sqkm = evergreen_pct * sq_km)


```

Now, you should have three different tables with the three land cover
classes (percentages and area) for each. We need to make one big table
of all three years. Make sure you name the columns accordingly, such as
"evergreen_pct16" or "mixed_sqkm_13".

```{r}
# You can rename the columns using the rename() function, see lines 61 - 68 above for some example code.


library(exactextractr)
library(dplyr)
library(sf)


if (!"sq_km" %in% colnames(parcel_shp)) {
  parcel_shp <- parcel_shp %>%
    mutate(sq_km = st_area(.) / 10^6)  # Convert from square meters to square kilometers
}

# Zonal statistics for 2019
evergreen_pct19 <- exact_extract(LC_19, parcel_shp, function(value, fraction) {
  100 * sum(fraction[value == 42], na.rm = TRUE) / sum(fraction, na.rm = TRUE)
})

deciduous_pct19 <- exact_extract(LC_19, parcel_shp, function(value, fraction) {
  100 * sum(fraction[value == 41], na.rm = TRUE) / sum(fraction, na.rm = TRUE)
})

mixed_pct19 <- exact_extract(LC_19, parcel_shp, function(value, fraction) {
  100 * sum(fraction[value == 43], na.rm = TRUE) / sum(fraction, na.rm = TRUE)
})

# Combine into a single table for 2019
parcel_lc19 <- parcel_shp %>%
  st_drop_geometry() %>% # Drop geometry for easier manipulation
  dplyr::select(ID, sq_km, LOCALITY, DIVISION, PROVINCE) %>%
  mutate(
    evergreen_pct = evergreen_pct19,
    deciduous_pct = deciduous_pct19,
    mixed_pct = mixed_pct19,
    evergreen_sqkm = evergreen_pct * sq_km / 100,
    deciduous_sqkm = deciduous_pct * sq_km / 100,
    mixed_sqkm = mixed_pct * sq_km / 100
  )

```

Zonal statistics for 2016

```{r}
# Zonal statistics for 2016
evergreen_pct16 <- exact_extract(LC_16, parcel_shp, function(value, fraction) {
  100 * sum(fraction[value == 42], na.rm = TRUE) / sum(fraction, na.rm = TRUE)
})

deciduous_pct16 <- exact_extract(LC_16, parcel_shp, function(value, fraction) {
  100 * sum(fraction[value == 41], na.rm = TRUE) / sum(fraction, na.rm = TRUE)
})

mixed_pct16 <- exact_extract(LC_16, parcel_shp, function(value, fraction) {
  100 * sum(fraction[value == 43], na.rm = TRUE) / sum(fraction, na.rm = TRUE)
})

# Combine into a single table for 2016
parcel_lc16 <- parcel_shp %>%
  st_drop_geometry() %>%
  dplyr::select(ID, sq_km, LOCALITY, DIVISION, PROVINCE) %>%
  mutate(
    evergreen_pct = evergreen_pct16,
    deciduous_pct = deciduous_pct16,
    mixed_pct = mixed_pct16,
    evergreen_sqkm = evergreen_pct * sq_km / 100,
    deciduous_sqkm = deciduous_pct * sq_km / 100,
    mixed_sqkm = mixed_pct * sq_km / 100
  )
```

Zonal statistics for 2013

```{r}
# Zonal statistics for 2013
evergreen_pct13 <- exact_extract(LC_13, parcel_shp, function(value, fraction) {
  100 * sum(fraction[value == 42], na.rm = TRUE) / sum(fraction, na.rm = TRUE)
})

deciduous_pct13 <- exact_extract(LC_13, parcel_shp, function(value, fraction) {
  100 * sum(fraction[value == 41], na.rm = TRUE) / sum(fraction, na.rm = TRUE)
})

mixed_pct13 <- exact_extract(LC_13, parcel_shp, function(value, fraction) {
  100 * sum(fraction[value == 43], na.rm = TRUE) / sum(fraction, na.rm = TRUE)
})

# Combine into a single table for 2013
parcel_lc13 <- parcel_shp %>%
  st_drop_geometry() %>%
  dplyr::select(ID, sq_km, LOCALITY, DIVISION, PROVINCE) %>%
  mutate(
    evergreen_pct = evergreen_pct13,
    deciduous_pct = deciduous_pct13,
    mixed_pct = mixed_pct13,
    evergreen_sqkm = evergreen_pct * sq_km / 100,
    deciduous_sqkm = deciduous_pct * sq_km / 100,
    mixed_sqkm = mixed_pct * sq_km / 100
  )
```

Combine all years into one table

```{r}
# Prep for combined table:
fc_19 <- parcel_lc19 |> 
  dplyr::select(ID, sq_km, LOCALITY, DIVISION, PROVINCE, evergreen_pct, deciduous_pct, mixed_pct, evergreen_sqkm, deciduous_sqkm, mixed_sqkm) |> 
  rename("eg19_pct" = evergreen_pct, 
         "decid19_pct" = deciduous_pct,
         "mix19_pct" = mixed_pct, 
         "eg19_sqkm" = evergreen_sqkm, 
         "decid19_sqkm" = deciduous_sqkm,
         "mixed19_sqkm" = mixed_sqkm)

fc_19$ID <- as.character(fc_19$ID)

fc_16 <- parcel_lc16 |> 
  dplyr::select(ID, evergreen_pct, deciduous_pct, mixed_pct, evergreen_sqkm, deciduous_sqkm, mixed_sqkm) |> 
  rename("eg16_pct" = evergreen_pct, 
         "decid16_pct" = deciduous_pct,
         "mix16_pct" = mixed_pct, 
         "eg16_sqkm" = evergreen_sqkm, 
         "decid16_sqkm" = deciduous_sqkm,
         "mixed16_sqkm" = mixed_sqkm) 

fc_16$ID <- as.character(fc_16$ID)

fc_13 <- parcel_lc13 |> 
  dplyr::select(ID, evergreen_pct, deciduous_pct, mixed_pct, evergreen_sqkm, deciduous_sqkm, mixed_sqkm) |> 
  rename("eg13_pct" = evergreen_pct, 
         "decid13_pct" = deciduous_pct,
         "mix13_pct" = mixed_pct, 
         "eg13_sqkm" = evergreen_sqkm, 
         "decid13_sqkm" = deciduous_sqkm,
         "mixed13_sqkm" = mixed_sqkm) 

fc_13$ID <- as.character(fc_13$ID)

fc_all_years <- merge(fc_19, fc_16, by="ID") 

# Check for duplicates in each table
sum(duplicated(fc_19$ID))  
sum(duplicated(fc_16$ID))  
sum(duplicated(fc_13$ID))  

fc_19 <- fc_19 |> dplyr::distinct(ID, .keep_all = TRUE)
fc_16 <- fc_16 |> dplyr::distinct(ID, .keep_all = TRUE)
fc_13 <- fc_13 |> dplyr::distinct(ID, .keep_all = TRUE)

fc_all_years <- merge(fc_19, fc_16, by = "ID", all = TRUE)
fc_all_years <- merge(fc_all_years, fc_13, by = "ID", all = TRUE)

```

# Task: Zonal statistics with multiple (urban and agriculture) land cover classes

Calculated for 2013. Combines all urban land cover classes and adds them
to dataframe. Your job is to calculate for 2016, 2019 and bind to the
big table calculated above. Please calculate percentage and sqkm (need
to do 2013 sqkm)

```{r}
# Define urban land cover values
values <- c(21, 22, 23, 24)

# Calculate combined percentages through a defined function
urban_pct13 <- exact_extract(LC_13, parcel_shp, function(value, fraction) {
  combined_fraction <- sum(fraction[value %in% values], na.rm = TRUE)
  
  total_fraction <- sum(fraction, na.rm = TRUE)
  
  100 * combined_fraction / total_fraction
})

# Convert to df
lc_all_years <- as.data.frame(urban_pct13) |> 
  cbind(fc_all_years)


#2016:
urban_pct16 <- exact_extract(LC_16, parcel_shp, function(value, fraction) {
  combined_fraction <- sum(fraction[value %in% values], na.rm = TRUE)
  total_fraction <- sum(fraction, na.rm = TRUE)
  100 * combined_fraction / total_fraction
})


#2019:
urban_pct19 <- exact_extract(LC_19, parcel_shp, function(value, fraction) {
  combined_fraction <- sum(fraction[value %in% values], na.rm = TRUE)
  total_fraction <- sum(fraction, na.rm = TRUE)
  100 * combined_fraction / total_fraction
})


#convert to dfs + bind:
lc_all_years <- fc_all_years %>%
  mutate(
    urban_pct13 = urban_pct13,
    urban_sqkm13 = urban_pct13 * sq_km / 100,
    urban_pct16 = urban_pct16,
    urban_sqkm16 = urban_pct16 * sq_km / 100,
    urban_pct19 = urban_pct19,
    urban_sqkm19 = urban_pct19 * sq_km / 100
  )

# Follow this for 2016, 2019 and bind to lc_all_years table.
# Make new columns with urban_sqkm's

```

# Task: Zonal Statistics for agriculture land cover:

```{r}
# Define urban land cover values
values <- c(81, 82)

# Calculate combined percentages through a defined function
ag_pct13 <- exact_extract(LC_13, parcel_shp, function(value, fraction) {
  combined_fraction <- sum(fraction[value %in% values], na.rm = TRUE)
  
  total_fraction <- sum(fraction, na.rm = TRUE)
  
  100 * combined_fraction / total_fraction
})

# Convert to df, rename cols
lc_all_years <- as.data.frame(ag_pct13) |> 
  cbind(lc_all_years)

#2016:
ag_pct16 <- exact_extract(LC_16, parcel_shp, function(value, fraction) {
  combined_fraction <- sum(fraction[value %in% values], na.rm = TRUE)
  total_fraction <- sum(fraction, na.rm = TRUE)
  100 * combined_fraction / total_fraction
})

#2019:
ag_pct19 <- exact_extract(LC_19, parcel_shp, function(value, fraction) {
  combined_fraction <- sum(fraction[value %in% values], na.rm = TRUE)
  total_fraction <- sum(fraction, na.rm = TRUE)
  100 * combined_fraction / total_fraction
})

#bind:
lc_all_years <- lc_all_years %>%
  mutate(
    ag_pct13 = ag_pct13,
    ag_sqkm13 = ag_pct13 * sq_km / 100,
    ag_pct16 = ag_pct16,
    ag_sqkm16 = ag_pct16 * sq_km / 100,
    ag_pct19 = ag_pct19,
    ag_sqkm19 = ag_pct19 * sq_km / 100
  )
# Follow this for 2016, 2019 and bind to lc_all_years table.
# Make new columns with ag_sqkm's
```

# Task: Make barplots of urban, ag, forest area over time:

Make sure each color corresponds to the right field: - Ag: blue - Urban:
red - Total forest: green

Show all years' data on a single plot. Once the legend is correct,
remove the x-axis titles.

```{r}
bp_colors <- c("dodgerblue2", "green4", "tomato2")

lc_all_years <- lc_all_years |> 
  mutate(urban_sqkm13 = urban_pct13*sq_km, 
         ag_sqkm13 = ag_pct13*sq_km,
         totalf_area13 = mixed13_sqkm + decid13_sqkm + eg13_sqkm)
# Add totalf_area19 or 16 depending on the year

lc_all_years_lng <- lc_all_years |> 
  pivot_longer(cols = c(urban_sqkm13, ag_sqkm13, totalf_area13), 
               names_to = "LCType", 
               values_to = "Area") 
  
lc_all_years_lng |> 
  group_by(LCType) |> 
  summarise(mean = mean(Area, na.rm = TRUE)) |> 
  ggplot(aes(x = LCType, y = mean, fill = LCType)) +
  geom_bar(stat = "identity") +
  labs(
    title = "LC area",
    y = "Units",
    fill = "Land Cover Type"
  ) +
  theme_minimal()


#2016:
#bp_colors <- c("dodgerblue2", "green4", "tomato2")

#lc_all_years <- lc_all_years |> 
  #mutate(urban_sqkm16 = urban_pct16*sq_km, 
        # ag_sqkm16 = ag_pct16*sq_km,
         #totalf_area16 = mixed16_sqkm + decid16_sqkm + eg16_sqkm)

#lc_all_years_lng <- lc_all_years |> 
  #pivot_longer(cols = c(urban_sqkm16, ag_sqkm16, totalf_area16), 
               #names_to = "LCType", 
               #values_to = "Area")

#lc_all_years_lng |> 
  #group_by(LCType) |> 
  #summarise(mean = mean(Area, na.rm = TRUE)) |> 
  #ggplot(aes(x = LCType, y = mean, fill = LCType)) +
  #geom_bar(stat = "identity") +
  #labs(
    #title = "LC area",
    #y = "Units",
   # fill = "Land Cover Type"
  #) +
  #theme_minimal()


#2019
#bp_colors <- c("dodgerblue2", "green4", "tomato2")

#lc_all_years <- lc_all_years |> 
  #mutate(urban_sqkm19 = urban_pct19*sq_km, 
         #ag_sqkm19 = ag_pct19*sq_km,
         #totalf_area19 = mixed19_sqkm + decid19_sqkm + eg19_sqkm)

#lc_all_years_lng <- lc_all_years |> 
  #pivot_longer(cols = c(urban_sqkm19, ag_sqkm19, totalf_area19), 
               #names_to = "LCType", 
               #values_to = "Area")

#lc_all_years_lng |> 
  #group_by(LCType) |> 
  #summarise(mean = mean(Area, na.rm = TRUE)) |> 
  #ggplot(aes(x = LCType, y = mean, fill = LCType)) +
  #geom_bar(stat = "identity") +
  #labs(
    #title = "LC area",
    #y = "Units",
    #fill = "Land Cover Type"
  #) +
  #theme_minimal()




lc_all_years <- lc_all_years |> 
  mutate(urban_sqkm13 = urban_pct13 * sq_km, 
         ag_sqkm13 = ag_pct13 * sq_km,
         totalf_area13 = mixed13_sqkm + decid13_sqkm + eg13_sqkm,
         urban_sqkm16 = urban_pct16 * sq_km,
         ag_sqkm16 = ag_pct16 * sq_km,
         totalf_area16 = mixed16_sqkm + decid16_sqkm + eg16_sqkm,
         urban_sqkm19 = urban_pct19 * sq_km,
         ag_sqkm19 = ag_pct19 * sq_km,
         totalf_area19 = mixed19_sqkm + decid19_sqkm + eg19_sqkm)


lc_all_years_lng <- lc_all_years |> 
  pivot_longer(cols = c(urban_sqkm13, ag_sqkm13, totalf_area13, 
                        urban_sqkm16, ag_sqkm16, totalf_area16,
                        urban_sqkm19, ag_sqkm19, totalf_area19), 
               names_to = "LCType", 
               values_to = "Area") |> 
  mutate(Year = case_when(
    str_detect(LCType, "13") ~ 2013,
    str_detect(LCType, "16") ~ 2016,
    str_detect(LCType, "19") ~ 2019
  ),
  LCType = case_when(
    str_detect(LCType, "urban") ~ "Urban",
    str_detect(LCType, "ag") ~ "Agriculture",
    str_detect(LCType, "totalf") ~ "Forest"
  ))


bp_colors <- c("Agriculture" = "dodgerblue2", 
               "Forest" = "green4", 
               "Urban" = "tomato2")

lc_all_years_lng |> 
  group_by(Year, LCType) |> 
  summarise(mean_area = mean(Area, na.rm = TRUE)) |> 
  ggplot(aes(x = as.factor(Year), y = mean_area, fill = LCType)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = bp_colors) +
  labs(
    title = "Land Cover Area Over Time",
    y = "Area (sq km)",
    fill = "LC Type"
  ) +
  theme_minimal() +
  theme(axis.title.x = element_blank()) 

```


# Task: Land Change Transition Matrix

```{r}
install.packages("reshape2")
library(reshape2)

fc_all_years_lng <- fc_all_years |> 
  mutate(urban13_sqkm = urban_pct13 * sq_km,
         urban16_sqkm = urban_pct16 * sq_km,
         urban19_sqkm = urban_pct19 * sq_km,
         ag13_sqkm = ag_pct13 * sq_km,
         ag16_sqkm = ag_pct16 * sq_km,
         ag19_sqkm = ag_pct19 * sq_km)

lc_data <- fc_all_years_lng |> 
  dplyr::select(ends_with("_sqkm")) 

lc_long <- lc_data %>%
   pivot_longer(cols = everything(),
              names_to = c("LandCover", "Year"),
               names_pattern = "(\\D+)(\\d+)_sqkm",
               values_to = "sqkm")

lc_long <- lc_long %>%
  group_by(LandCover) %>%
  arrange(Year) %>%
  mutate(next_sqkm = lead(sqkm)) %>%
  filter(!is.na(next_sqkm))

# Group by class -- Do for every class
eg_transition <- lc_long %>% filter(LandCover == "eg")

transition_matrix <- table(eg_transition$sqkm, eg_transition$next_sqkm)




```

